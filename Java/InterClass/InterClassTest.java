package InterClass;

/**
 * 如果一个事物内部包含另一个事物，那么这就是一个类内部包含另一个类
 *
 * 分类：
 * 1. 成员内部类
 * 格式：
 * // 外部类
 * 修饰符 class 类名称{
 *      // 内部类
 *     修饰符 class 类名称{
 *         ...
 *     }
 *     ...
 * }
 * 内部类访问外部类随意；外部用内部，需要内部类对象
 * 如何使用内部类？
 * 1. 间接方式：在外部类的方法中使用内部类，然后main方法中只调用外部类方法
 * 2. 直接方式：类名称 对象名 = new 类名称()
 * 【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】
 * 3. 局部内部类如果希望访问所在方法的局部变量，那么这个变量必须是有效final的
 * ————————————————————————————————————————————————————————————————————————————————
 * 2. 局部内部类(包含匿名内部类)
 * 如果一个类是定义在一个方法内部，那么它就是一个局部内部类；只有当前所属方法才能使用它，出了这个方法的范围就不能再用
 * 定义格式：
 * 修饰符 class 外部类名称{
 *     修饰符 返回值类型 外部类名称（参数列表）{
 *         class 局部内部类名称{
 *             ...
 *         }
 *         ...
 *     }
 *     ...
 * }
 *—————————————————————————————————————————————————————————————————————————————————————
 * 包含有外部类、内部类的访问控制修饰符的使用：
 * 1. 外部类：public、(default)
 * 2. 成员内部类:：public/protected/(default)/private
 * 3. 局部内部类：什么都不能写
 */
public class InterClassTest {
    public static void main(String[] args) {
        Body body = new Body();
        body.methodBody(); // outer class...  healthy  beat...

//        Body.Heart heart = new Body().new Heart();
//        heart.beat(); // beat...
//        heart.show();
        /*
         * heart
         * HEART
         * body
         */
    }
}
